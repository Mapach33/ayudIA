const axios = require('axios');
const config = require('../config/config');

class OllamaService {
  constructor() {
    this.baseUrl = config.ollama.baseUrl;
    this.model = config.ollama.model;
    this.systemPrompt = this.buildSystemPrompt();
  }

  buildSystemPrompt() {
    const company = config.company;
    return `Eres un asistente virtual de ${company.name}. 

INFORMACI√ìN DE LA EMPRESA:
- Nombre: ${company.name}
- Descripci√≥n: ${company.description}
- Tel√©fono: ${company.phone}
- Email: ${company.email}
- Sitio web: ${company.website}
- Direcci√≥n: ${company.address}
- Horarios de atenci√≥n: ${company.workingHours}

INSTRUCCIONES:
1. Responde siempre de manera profesional y amigable
2. Mant√©n las respuestas concisas pero informativas
3. Si te preguntan por informaci√≥n de la empresa, usa los datos proporcionados
4. Si no tienes informaci√≥n espec√≠fica, ofrece alternativas de contacto
5. Ayuda con consultas generales relacionadas con los servicios de la empresa
6. Mant√©n un tono conversacional pero profesional
7. Si alguien necesita atenci√≥n urgente, proporciona los datos de contacto

Recuerda que representas a ${company.name} en todo momento.`;
  }

  async generateResponse(userMessage, phoneNumber = null) {
    try {
      // Log del mensaje recibido en desarrollo
      if (config.NODE_ENV === 'development' && phoneNumber) {
        console.log(`üß† Procesando mensaje de ${phoneNumber}: ${userMessage}`);
      }

      // Verificar si usar detecci√≥n de palabras clave
      if (config.bot.botBehavior.useKeywordDetection) {
        const keywordResponse = this.checkKeywords(userMessage);
        if (keywordResponse) {
          return keywordResponse;
        }
        
        // Si no hay respuesta de palabras clave y no debe usar IA como fallback
        if (!config.bot.botBehavior.fallbackToAI) {
          return "Lo siento, no entend√≠ tu mensaje. ¬øPodr√≠as ser m√°s espec√≠fico?";
        }
      }

      const response = await axios.post(`${this.baseUrl}/api/chat`, {
        model: this.model,
        stream: false,
        messages: [
          {
            role: 'system',
            content: this.buildSystemPrompt()
          },
          {
            role: 'user',
            content: userMessage
          }
        ],
        options: {
          temperature: config.bot.aiSettings.temperature || 0.7,
          top_p: 0.9,
          max_tokens: config.bot.aiSettings.maxTokens || 500
        }
      });

      let botResponse = response.data.message.content;
      
      // Aplicar configuraciones de estilo
      if (!config.bot.aiSettings.includeEmojis) {
        botResponse = botResponse.replace(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu, '');
      }
      
      // Limitar longitud si est√° configurado
      if (config.bot.aiSettings.maxResponseLength && botResponse.length > config.bot.aiSettings.maxResponseLength) {
        botResponse = botResponse.substring(0, config.bot.aiSettings.maxResponseLength) + '...';
      }
      
      return botResponse;

    } catch (error) {
      console.error('‚ùå Error con Ollama:', error.message);
      throw new Error('Error al generar respuesta con Ollama');
    }
  }

  // Verificar palabras clave y devolver respuesta autom√°tica
  checkKeywords(message) {
    const lowerMessage = message.toLowerCase();
    const keywords = config.bot.keywords;
    const responses = config.bot.autoResponses;
    
    // Verificar cada categor√≠a de palabras clave
    for (const [category, keywordList] of Object.entries(keywords)) {
      for (const keyword of keywordList) {
        if (lowerMessage.includes(keyword)) {
          let response = responses[category] || '';
          
          // Reemplazar placeholders con informaci√≥n de la empresa
          response = response.replace(/{company_name}/g, config.company.name);
          response = response.replace(/{company_phone}/g, config.company.phone);
          response = response.replace(/{company_email}/g, config.company.email);
          response = response.replace(/{company_website}/g, config.company.website);
          response = response.replace(/{company_address}/g, config.company.address);
          response = response.replace(/{company_services}/g, config.company.services);
          
          return response;
        }
      }
    }
    
    return null;
  }

  async healthCheck() {
    try {
      const response = await axios.get(`${this.baseUrl}/api/tags`);
      return response.status === 200;
    } catch (error) {
      console.error('‚ùå Error verificando Ollama:', error.message);
      return false;
    }
  }

  updateSystemPrompt(newPrompt) {
    this.systemPrompt = newPrompt;
    console.log('‚úÖ System prompt actualizado');
  }
}

module.exports = new OllamaService();
